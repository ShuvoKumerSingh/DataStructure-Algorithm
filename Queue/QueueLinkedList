class Node:
    def __init__(self,value=None):
        self.value = value
        self.next = None
    def __str__(self):
        return str(self.value)

class LinkedList :
    def __init__(self):
        self.head = None
        self.tail = None

    def __iter__(self):
        curNode = self.head
        while curNode:
            yield  curNode
            curNode = curNode.next
class Queue:
    def __init__(self):
        self.LinkedList = LinkedList()
    def __str__(self):
        return ' '.join([str(node) for node in self.LinkedList])

    def enqueue(self,value):
        node = Node(value)
        if self.LinkedList.head is None:
            self.LinkedList.head = node
            self.LinkedList.tail = node
        else:
            self.LinkedList.tail.next = node
            self.LinkedList.tail = node
    def isEmpty(self):
        if self.LinkedList.head is None:
            return True
        else:
            return False
    def dqueue(self):
        if self.isEmpty():
            return "The Queue is Empty"
        else:
            firstValue = self.LinkedList.head.value
            if self.LinkedList.head == self.LinkedList.tail:
                self.LinkedList.head = None
                self.LinkedList.tail = None
            else:
                self.LinkedList.head = self.LinkedList.head.next
            return firstValue
    def peek(self):
        if self.isEmpty():
            return "This is empty"
        else:
            return self.LinkedList.head

    def delete(self):
            self.LinkedList.head=None
            self.LinkedList.tail = None


